name: "nova-mensagem-chatwoot"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatwoot_frontend.rule=Host(`automation-deandhela-envia-mensagem.wtoi4m.easypanel.host`)"
      - "traefik.http.routers.chatwoot_frontend.entrypoints=websecure"
      - "traefik.http.routers.chatwoot_frontend.tls.certresolver=letsencryptresolver" # Verifique se 'letsencryptresolver' é o nome correto no seu Easypanel
      - "traefik.http.services.chatwoot_frontend_service.loadbalancer.server.port=80" # Nginx roda na porta 80
      - "traefik.http.routers.chatwoot_frontend.service=chatwoot_frontend_service"

  backend:
    build:
      context: .
      dockerfile: Dockerfile # O Dockerfile original para o Flask app
    environment:
      # As variáveis CHATWOOT_API_KEY, CHATWOOT_ACCOUNT_ID, CHATWOOT_BASE_URL
      # devem ser configuradas na interface do Easypanel para este serviço de backend.
      PYTHONUNBUFFERED: "1"
      # FLASK_APP, FLASK_RUN_HOST, FLASK_RUN_PORT são definidos no Dockerfile do backend.
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatwoot_backend.rule=Host(`api.automation-deandhela-envia-mensagem.wtoi4m.easypanel.host`)" # Subdomínio 'api'
      - "traefik.http.routers.chatwoot_backend.entrypoints=websecure"
      - "traefik.http.routers.chatwoot_backend.tls.certresolver=letsencryptresolver" # Verifique o nome do resolver
      - "traefik.http.services.chatwoot_backend_service.loadbalancer.server.port=5001" # Flask roda na porta 5001
      - "traefik.http.routers.chatwoot_backend.service=chatwoot_backend_service"
